# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:48:24+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Header

from models import (
    DealItemSearchResponse,
    Event,
    EventItemSearchResponse,
    EventSearchResponse,
)

app = MCPProxy(
    contact={'name': 'eBay Inc,', 'x-twitter': 'ebay'},
    description='<span class="tablenote"><b>Note:</b> This is a <a href="https://developer.ebay.com/api-docs/static/versioning.html#limited" target="_blank"> <img src="/cms/img/docs/partners-api.svg" class="legend-icon partners-icon" title="Limited Release"  alt="Limited Release" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />This API allows third-party developers to search for and retrieve details about eBay deals and events, as well as the items associated with those deals and events.',
    license={
        'name': 'eBay API License Agreement',
        'url': 'https://go.developer.ebay.com/api-license-agreement',
    },
    title='Deal API',
    version='v1.3.0',
    servers=[
        {
            'description': 'Production',
            'url': 'https://api.ebay.com{basePath}',
            'variables': {'basePath': {'default': '/buy/deal/v1'}},
        }
    ],
)


@app.get(
    '/deal_item',
    description=""" This method retrieves a paginated set of deal items. The result set contains all deal items associated with the specified search criteria and marketplace ID. Request headers This method uses the X-EBAY-C-ENDUSERCTX request header to support revenue sharing for eBay Partner Networks and to improve the accuracy of shipping and delivery time estimations. For details see, Request headers in the Buying Integration Guide. Restrictions This method can return a maximum of 10,000 items. For a list of supported sites and other restrictions, see API Restrictions. eBay Partner Network: In order to receive a commission for your sales, you must use the URL returned in the itemAffiliateWebUrl field to forward your buyer to the ebay.com site. """,
    tags=['deal_operations', 'event_associated_item_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_deal_items(
    category_ids: Optional[str] = None,
    commissionable: Optional[str] = None,
    delivery_country: Optional[str] = None,
    limit: Optional[str] = None,
    offset: Optional[str] = None,
    x__e_b_a_y__c__m_a_r_k_e_t_p_l_a_c_e__i_d: str = Header(
        ..., alias='X-EBAY-C-MARKETPLACE-ID'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/event',
    description=""" This method returns paginated results containing all eBay events for the specified marketplace. Request headers This method uses the X-EBAY-C-ENDUSERCTX request header to support revenue sharing for eBay Partner Networks and to improve the accuracy of shipping and delivery time estimations. For details see, Request headers in the Buying Integration Guide. Restrictions This method can return a maximum of 10,000 items. For a list of supported sites and other restrictions, see API Restrictions. eBay Partner Network: In order to receive a commission for your sales, you must use the URL returned in the itemAffiliateWebUrl field to forward your buyer to the ebay.com site. """,
    tags=['event_associated_item_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_events(
    limit: Optional[str] = None,
    offset: Optional[str] = None,
    x__e_b_a_y__c__m_a_r_k_e_t_p_l_a_c_e__i_d: str = Header(
        ..., alias='X-EBAY-C-MARKETPLACE-ID'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/event/{event_id}',
    description=""" This method retrieves the details for an eBay event. The result set contains detailed information associated with the specified event ID, such as applicable coupons, start and end dates, and event terms. Request headers This method uses the X-EBAY-C-ENDUSERCTX request header to support revenue sharing for eBay Partner Networks and to improve the accuracy of shipping and delivery time estimations. For details see, Request headers in the Buying Integration Guide. Restrictions This method can return a maximum of 10,000 items. For a list of supported sites and other restrictions, see API Restrictions. eBay Partner Network: In order to receive a commission for your sales, you must use the URL returned in the itemAffiliateWebUrl field to forward your buyer to the ebay.com site. """,
    tags=['event_associated_item_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_event(
    x__e_b_a_y__c__m_a_r_k_e_t_p_l_a_c_e__i_d: str = Header(
        ..., alias='X-EBAY-C-MARKETPLACE-ID'
    ),
    event_id: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/event_item',
    description=""" This method returns a paginated set of event items. The result set contains all event items associated with the specified search criteria and marketplace ID. Request headers This method uses the X-EBAY-C-ENDUSERCTX request header to support revenue sharing for eBay Partner Networks and to improve the accuracy of shipping and delivery time estimations. For details see, Request headers in the Buying Integration Guide. Restrictions This method can return a maximum of 10,000 items. For a list of supported sites and other restrictions, see API Restrictions. eBay Partner Network: In order to receive a commission for your sales, you must use the URL returned in the itemAffiliateWebUrl field to forward your buyer to the ebay.com site. """,
    tags=['event_associated_item_operations', 'event_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_event_items(
    category_ids: Optional[str] = None,
    delivery_country: Optional[str] = None,
    event_ids: str = ...,
    limit: Optional[str] = None,
    offset: Optional[str] = None,
    x__e_b_a_y__c__m_a_r_k_e_t_p_l_a_c_e__i_d: str = Header(
        ..., alias='X-EBAY-C-MARKETPLACE-ID'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
