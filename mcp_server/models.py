# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:48:24+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class Amount(BaseModel):
    currency: Optional[str] = Field(
        None,
        description="The three-letter ISO 4217 code representing the currency of the amount in the value field. Default: The currency of the authenticated user's country. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/deal/types/bas:CurrencyCodeEnum'>eBay API documentation</a>",
    )
    value: Optional[str] = Field(
        None,
        description='The monetary value, in the currency specified by the currency field.',
    )


class ErrorParameter(BaseModel):
    name: Optional[str] = Field(None, description='The object of the error.')
    value: Optional[str] = Field(None, description='The value of the object.')


class Image(BaseModel):
    height: Optional[str] = Field(None, description='The height of the image.')
    imageUrl: Optional[str] = Field(
        None, description='The relative path to the image location.'
    )
    text: Optional[str] = Field(None, description='The text associated with the image.')
    width: Optional[str] = Field(None, description='The width of the image.')


class MarketingPrice(BaseModel):
    discountAmount: Optional[Amount] = Field(
        None, description='The monetary value of the seller discount.'
    )
    discountPercentage: Optional[str] = Field(
        None,
        description='The percentage of the seller discount based on the value returned in the originalPrice field.',
    )
    originalPrice: Optional[Amount] = Field(
        None, description='The monetary value of the item prior to the discount.'
    )
    priceTreatment: Optional[str] = Field(
        None,
        description="The pricing treatment (discount) that was applied to the price of the item. Note: The pricing treatment affects how and where the discounted price can be displayed. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/deal/types/api:PriceTreatmentEnum'>eBay API documentation</a>",
    )


class ShippingOption(BaseModel):
    shippingCost: Optional[Amount] = Field(
        None,
        description='The final shipping cost for all items after all discounts are applied. Note: The price does include the value-added tax (VAT) for applicable jurisdictions when requested from supported marketplaces. In this case, users must pass the X-EBAY-C-MARKETPLACE-ID request header specifying the supported marketplace (such as EBAY_GB) to see the VAT-inclusive pricing. For more information on VAT, refer to VAT Obligations in the EU.',
    )
    shippingCostType: Optional[str] = Field(
        None,
        description='The class of the shipping cost. Valid Values: FIXED or CALCULATED Code so that your app gracefully handles any future changes to this list.',
    )


class Terms(BaseModel):
    fullText: Optional[str] = Field(
        None, description='A full-text description of the terms.'
    )
    summary: Optional[str] = Field(
        None, description='A summarized description of the terms.'
    )


class Coupon(BaseModel):
    redemptionCode: Optional[str] = Field(None, description='The coupon code.')
    terms: Optional[Terms] = Field(
        None, description='The terms of use associated with the coupon.'
    )


class DealItem(BaseModel):
    additionalImages: Optional[List[Image]] = Field(
        None, description='The additional images for the deal item.'
    )
    categoryAncestorIds: Optional[List[str]] = Field(
        None, description='The IDs of the ancestors for the primary category.'
    )
    categoryId: Optional[str] = Field(
        None,
        description='The ID of the leaf category for the deal item. A leaf category is the lowest level in a category and has no children.',
    )
    commissionable: Optional[bool] = Field(
        None,
        description='A boolean value specifying whether the listing has commission.',
    )
    dealAffiliateWebUrl: Optional[str] = Field(
        None,
        description='The deal associated with the item with affiliate attribution.',
    )
    dealEndDate: Optional[str] = Field(
        None, description='The date after which the deal ends.'
    )
    dealStartDate: Optional[str] = Field(
        None, description='The date on which the deal starts.'
    )
    dealWebUrl: Optional[str] = Field(
        None, description='The web URL for the deal associated with the item.'
    )
    energyEfficiencyClass: Optional[str] = Field(
        None, description='A string value specifying the Energy Efficiency class.'
    )
    image: Optional[Image] = Field(
        None, description='The primary image for the deal item.'
    )
    itemAffiliateWebUrl: Optional[str] = Field(
        None, description='The item web URL with affiliate attribution.'
    )
    itemGroupId: Optional[str] = Field(
        None,
        description='The unique identifier for the deal item group. This is the parent item ID for the seller-defined variations. Note: This field is returned for multiple-SKU items.',
    )
    itemGroupType: Optional[str] = Field(
        None,
        description="An enumeration value that indicates the type of item group. An item group contains items that have various aspect differences, such as color, size, or storage capacity. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/deal/types/api:ItemGroupTypeEnum'>eBay API documentation</a>",
    )
    itemId: Optional[str] = Field(
        None,
        description='The unique identifier for the deal item. Note: This field is only returned for single-SKU items.',
    )
    itemWebUrl: Optional[str] = Field(
        None, description='The web URL for the deal item.'
    )
    legacyItemId: Optional[str] = Field(
        None, description='The legacy item ID associated with the deal item.'
    )
    marketingPrice: Optional[MarketingPrice] = Field(
        None,
        description='The original price for the deal item, and the discount amount and percentage.',
    )
    price: Optional[Amount] = Field(
        None,
        description='The price for the deal item. Note: The price does include the value-added tax (VAT) for applicable jurisdictions when requested from supported marketplaces. In this case, users must pass the X-EBAY-C-MARKETPLACE-ID request header specifying the supported marketplace (such as EBAY_GB) to see the VAT-inclusive pricing. For more information on VAT, refer to VAT Obligations in the EU.',
    )
    qualifiedPrograms: Optional[List[str]] = Field(
        None, description='A list of programs applicable to the item.'
    )
    shippingOptions: Optional[List[ShippingOption]] = Field(
        None, description='The cost required to ship the deal item.'
    )
    title: Optional[str] = Field(None, description='The title of the deal item.')
    unitPrice: Optional[Amount] = Field(
        None,
        description='The price per unit for the deal item. Some European countries require listings for certain types of products to include the price per unit so that buyers can accurately compare prices. For example: &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;',
    )
    unitPricingMeasure: Optional[str] = Field(
        None,
        description='The designation used to specify the quantity of the deal item, such as size, weight, volume, and count. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;',
    )


class DealItemSearchResponse(BaseModel):
    dealItems: Optional[List[DealItem]] = Field(
        None, description='A list of deal items that match the search criteria.'
    )
    href: Optional[str] = Field(
        None, description='The relative path to the current set of results.'
    )
    limit: Optional[int] = Field(
        None,
        description='The maximum number of items, from the current result set, returned on a single page. Default: 20',
    )
    next: Optional[str] = Field(
        None, description='The relative path to the next set of results.'
    )
    offset: Optional[int] = Field(
        None,
        description='The number of items that will be skipped in the result set. This is used with the limit field to control the pagination of the output. For example, if the offset is set to 0 and the limit is set to 10, the method will retrieve items 1 through 10 from the list of items returned. If the offset is set to 10 and the limit is set to 10, the method will retrieve items 11 through 20 from the list of items returned. Default: 0',
    )
    prev: Optional[str] = Field(
        None, description='The relative path to the previous set of results.'
    )
    total: Optional[int] = Field(
        None, description='The total number of matches for the search criteria.'
    )


class Error(BaseModel):
    category: Optional[str] = Field(None, description='Identifies the type of erro.')
    domain: Optional[str] = Field(
        None,
        description='Name for the primary system where the error occurred. This is relevant for application errors.',
    )
    errorId: Optional[int] = Field(
        None, description='A unique number to identify the error.'
    )
    inputRefIds: Optional[List[str]] = Field(
        None,
        description='An array of request elements most closely associated to the error.',
    )
    longMessage: Optional[str] = Field(
        None, description='A more detailed explanation of the error.'
    )
    message: Optional[str] = Field(
        None,
        description="Information on how to correct the problem, in the end user's terms and language where applicable.",
    )
    outputRefIds: Optional[List[str]] = Field(
        None,
        description='An array of request elements most closely associated to the error.',
    )
    parameters: Optional[List[ErrorParameter]] = Field(
        None,
        description='An array of name/value pairs that describe details the error condition. These are useful when multiple errors are returned.',
    )
    subdomain: Optional[str] = Field(
        None,
        description='Further helps indicate which subsystem the error is coming from. System subcategories include: Initialization, Serialization, Security, Monitoring, Rate Limiting, etc.',
    )


class Event(BaseModel):
    applicableCoupons: Optional[List[Coupon]] = Field(
        None, description='A list of coupons associated with the event.'
    )
    description: Optional[str] = Field(None, description='The event description.')
    endDate: Optional[str] = Field(None, description='The end date for the event.')
    eventAffiliateWebUrl: Optional[str] = Field(
        None,
        description='The URL of the View Event page for the event, which includes the affiliate tracking ID.',
    )
    eventId: Optional[str] = Field(
        None, description='The unique identifier for the event.'
    )
    eventWebUrl: Optional[str] = Field(None, description='The web URL for the event.')
    images: Optional[List[Image]] = Field(None, description='The images for the event.')
    startDate: Optional[str] = Field(None, description='The start date for the event.')
    terms: Optional[Terms] = Field(
        None, description='The terms associated with the event.'
    )
    title: Optional[str] = Field(None, description='The title of the event.')


class EventItem(BaseModel):
    additionalImages: Optional[List[Image]] = Field(
        None, description='The additional images for the event item.'
    )
    categoryAncestorIds: Optional[List[str]] = Field(
        None, description='The IDs of the ancestors for the primary category.'
    )
    categoryId: Optional[str] = Field(
        None,
        description='The ID of the leaf category for the event item. A leaf category is the lowest level in a category and has no children.',
    )
    energyEfficiencyClass: Optional[str] = Field(
        None, description='A string value specifying the Energy Efficiency class.'
    )
    eventId: Optional[str] = Field(
        None, description='The unique event identifier associated with the item.'
    )
    image: Optional[Image] = Field(None, description='The image for the event item.')
    itemAffiliateWebUrl: Optional[str] = Field(
        None, description='The item web URL with affiliate attribution.'
    )
    itemGroupId: Optional[str] = Field(
        None,
        description='The unique identifier for the event item group. This is the parent item ID for the seller-defined variations. Note: This field is returned for multiple-SKU items.',
    )
    itemGroupType: Optional[str] = Field(
        None,
        description="An enumeration value that indicates the type of item group. An item group contains items that have various aspect differences, such as color, size, or storage capacity. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/buy/deal/types/api:ItemGroupTypeEnum'>eBay API documentation</a>",
    )
    itemId: Optional[str] = Field(
        None,
        description='The unique identifier for the event item. Note: This field is only returned for single-SKU items.',
    )
    itemWebUrl: Optional[str] = Field(
        None, description='The web URL for the event item.'
    )
    legacyItemId: Optional[str] = Field(
        None, description='The legacy item ID associated with the event item.'
    )
    marketingPrice: Optional[MarketingPrice] = Field(
        None,
        description='The original price for the event item, and the discount amount and percentage.',
    )
    price: Optional[Amount] = Field(
        None, description='The applicable price for the event item.'
    )
    qualifiedPrograms: Optional[List[str]] = Field(
        None, description='A list of programs applicable to the event item.'
    )
    shippingOptions: Optional[List[ShippingOption]] = Field(
        None, description='The cost required to ship the event item.'
    )
    title: Optional[str] = Field(None, description='The title of the event item.')
    unitPrice: Optional[Amount] = Field(
        None,
        description='The price per unit for the event item. Some European countries require listings for certain types of products to include the price per unit so that buyers can accurately compare prices. For example: &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;',
    )
    unitPricingMeasure: Optional[str] = Field(
        None,
        description='The designation used to specify the quantity of the event item, such as size, weight, volume, and count. This helps buyers compare prices. For example, the following tells the buyer that the item is 7.99 per 100 grams. &quot;unitPricingMeasure&quot;: &quot;100g&quot;, &quot;unitPrice&quot;: { &nbsp;&nbsp;&quot;value&quot;: &quot;7.99&quot;, &nbsp;&nbsp;&quot;currency&quot;: &quot;GBP&quot;',
    )


class EventItemSearchResponse(BaseModel):
    eventItems: Optional[List[EventItem]] = Field(
        None, description='A list of event items that match the search criteria.'
    )
    href: Optional[str] = Field(
        None, description='The relative path to the current set of results.'
    )
    limit: Optional[int] = Field(
        None,
        description='The maximum number of items, from the current result set, returned on a single page. Default: 20',
    )
    next: Optional[str] = Field(
        None, description='The relative path to the next set of results.'
    )
    offset: Optional[int] = Field(
        None,
        description='The number of items that will be skipped in the result set. This is used with the limit field to control the pagination of the output. For example, if the offset is set to 0 and the limit is set to 10, the method will retrieve items 1 through 10 from the list of items returned. If the offset is set to 10 and the limit is set to 10, the method will retrieve items 11 through 20 from the list of items returned. Default: 0',
    )
    prev: Optional[str] = Field(
        None, description='The relative path to the previous set of results.'
    )
    total: Optional[int] = Field(
        None,
        description='The total number of matches for the specified search criteria.',
    )


class EventSearchResponse(BaseModel):
    events: Optional[List[Event]] = Field(
        None, description='A list of results that match the search criteria.'
    )
    href: Optional[str] = Field(
        None, description='The relative path to the current set of results.'
    )
    limit: Optional[int] = Field(
        None,
        description='The maximum number of items, from the current result set, returned on a single page. Default: 20',
    )
    next: Optional[str] = Field(
        None, description='The relative path to the next set of results.'
    )
    offset: Optional[int] = Field(
        None,
        description='The number of items that will be skipped in the result set. This is used with the limit field to control the pagination of the output. For example, if the offset is set to 0 and the limit is set to 10, the method will retrieve items 1 through 10 from the list of items returned. If the offset is set to 10 and the limit is set to 10, the method will retrieve items 11 through 20 from the list of items returned. Default: 0',
    )
    prev: Optional[str] = Field(
        None, description='The relative path to the previous set of results.'
    )
    total: Optional[int] = Field(
        None,
        description='The total number of matches for the specified search criteria.',
    )
